/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.VehicleBooking;


import Business.EcoSystem;

import Business.User.User;
import Business.WorkRequest.ParkingWorkRequest;
import Business.Parking.Parking;

import java.awt.Color;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.MutableComboBoxModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sushant
 */
public class ParkingVehicleManagementPanel extends javax.swing.JPanel {

    EcoSystem system;

    public ParkingVehicleManagementPanel(EcoSystem system) {
        initComponents();
        this.system = system;

        // Populate the dropdown with parking lot names
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        for (Parking parkList : system.getParkingDirectory().getParkingDirectory()) {
            model.addElement(parkList.getParkingName());
        }
        chooseParkDropdown.setModel(model);

        parkNameTxt.setEditable(false);
        

        // Populate the parking work request table
        populateRequestTable();
        formatRows();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewParkBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        numberOfHoursTxt = new javax.swing.JTextField();
        bookParkBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        parkWorkQueueTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        chooseParkDropdown = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        parkNameTxt = new javax.swing.JTextField();
        parkBookingDateTxt = new com.toedter.calendar.JDateChooser();

        viewParkBtn.setBackground(new java.awt.Color(0, 0, 0));
        viewParkBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        viewParkBtn.setForeground(new java.awt.Color(255, 255, 255));
        viewParkBtn.setText("View Details");
        viewParkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewParkBtnActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setText("Select Pool Booking Date:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setText("Enter Number of Hours:");

        bookParkBtn.setBackground(new java.awt.Color(0, 0, 0));
        bookParkBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bookParkBtn.setForeground(new java.awt.Color(255, 255, 255));
        bookParkBtn.setText("Book ");
        bookParkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookParkBtnActionPerformed(evt);
            }
        });

        parkWorkQueueTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        parkWorkQueueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Park Name", "Booking Date", "Number of hours", "Request Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(parkWorkQueueTable);

        jLabel1.setFont(new java.awt.Font("MS UI Gothic", 1, 36)); // NOI18N
        jLabel1.setText("Book A Parking");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Choose a parking lot of your choice:");

        jLabel9.setFont(new java.awt.Font("MS UI Gothic", 1, 24)); // NOI18N
        jLabel9.setText("Park Booking Status");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Park Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(390, 390, 390)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(400, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(288, 288, 288))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(100, 100, 100)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(40, 40, 40)
                            .addComponent(numberOfHoursTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(380, 380, 380)
                            .addComponent(chooseParkDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(200, 200, 200)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(parkNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(80, 80, 80)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(40, 40, 40)
                            .addComponent(parkBookingDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(140, 140, 140)
                            .addComponent(bookParkBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(93, 93, 93)
                            .addComponent(viewParkBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(500, 500, 500)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(62, 62, 62)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(658, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 120, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel8)
                        .addComponent(numberOfHoursTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chooseParkDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(25, 25, 25)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3)
                        .addComponent(parkNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(5, 5, 5)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(bookParkBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(viewParkBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7)
                                .addComponent(parkBookingDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGap(110, 110, 110)
                    .addComponent(jLabel9)
                    .addGap(35, 35, 35)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewParkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewParkBtnActionPerformed
        // View Vehicle Details on choosing

         try {
            if (chooseParkDropdown.getSelectedItem() != null) {
                String parkName = String.valueOf(chooseParkDropdown.getSelectedItem());
                Parking parkDetails = system.getParkingDirectory().getParkingByName(parkName);

                parkNameTxt.setText(parkDetails.getParkingName());
                
            } else {
                JOptionPane.showMessageDialog(this, "Choose a valid Park for booking");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Choose a valid Park for booking");
        }
    }//GEN-LAST:event_viewParkBtnActionPerformed

    private void bookParkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookParkBtnActionPerformed
        // Book a vehicle after entering details
        
 ParkingWorkRequest bookPark = new ParkingWorkRequest();

        try {
            if (chooseParkDropdown.getSelectedItem() != null) {
                String parkName = String.valueOf(chooseParkDropdown.getSelectedItem());
                Parking parkDetails = system.getParkingDirectory().getParkingByName(parkName);

                Date selectedDate = parkBookingDateTxt.getDate();
                SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                String strDate = dateFormat.format(selectedDate);
                Date bookingDate = dateFormat.parse(strDate);

                int numberOfHours = Integer.parseInt(numberOfHoursTxt.getText());

                bookPark.setParkingDetails(parkDetails);
                bookPark.setBookingDate(bookingDate);
                bookPark.setNumberOfHours(numberOfHours);
                bookPark.setStatus("Pending");

                system.getParkingWorkRequestDirectory().getParkingWorkRequestList().add(bookPark);

                JOptionPane.showMessageDialog(this, "Park booking request sent to Manager");
                populateRequestTable();
                clearFields();
                formatRows();
            } else {
                JOptionPane.showMessageDialog(this, "Enter valid details for booking a Park");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter valid details for booking a Park");
        }
    }//GEN-LAST:event_bookParkBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bookParkBtn;
    private javax.swing.JComboBox<String> chooseParkDropdown;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField numberOfHoursTxt;
    private com.toedter.calendar.JDateChooser parkBookingDateTxt;
    private javax.swing.JTextField parkNameTxt;
    private javax.swing.JTable parkWorkQueueTable;
    private javax.swing.JButton viewParkBtn;
    // End of variables declaration//GEN-END:variables
private void populateRequestTable() {
    try {
        DefaultTableModel model = (DefaultTableModel) parkWorkQueueTable.getModel();
        model.setRowCount(0);  // Clear the existing rows

        for (ParkingWorkRequest parkWorkRequest : system.getParkingWorkRequestDirectory().getParkingWorkRequestList()) {
            Object[] newRow = new Object[4]; 
            newRow[0] = parkWorkRequest.getParkingDetails().getParkingName();
            newRow[1] = parkWorkRequest.getBookingDate();
            newRow[2] = parkWorkRequest.getNumberOfHours();
            newRow[3] = parkWorkRequest.getStatus(); 

            model.addRow(newRow);  // Add the row to the model
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e.getMessage());
    }
}
private void clearFields() {
        parkNameTxt.setText("");
        
        numberOfHoursTxt.setText("");
        parkBookingDateTxt.setCalendar(null);
    }

// Method to format table rows based on the status
private void formatRows() {
    DefaultTableModel model = (DefaultTableModel) parkWorkQueueTable.getModel();

    parkWorkQueueTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
        @Override
        public java.awt.Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            final java.awt.Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            
            String status = String.valueOf(model.getValueAt(row, 3)); 
            if ("Pending".equals(status)) {
                c.setBackground(Color.WHITE);
            } else if ("Approved".equals(status)) {
                c.setBackground(Color.GREEN);
            } else if ("Rejected".equals(status)) {
                c.setBackground(Color.RED);
            }
            return c;
        }
    });
}
}

