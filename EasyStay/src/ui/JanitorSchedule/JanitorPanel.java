/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.JanitorSchedule;

import Business.EcoSystem;
import Business.HouseKeeping.RoomCleaning.Schedule;
import Business.User.User;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rushang 
 */
public class JanitorPanel extends javax.swing.JPanel {

    /**
     * Creates new form JanitorPanel
     */
    EcoSystem system;
    User user;

    public JanitorPanel(EcoSystem system, User user) {
        initComponents();
        this.system = system;
        this.user = user;

        populateTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pendingTasksTable = new javax.swing.JTable();
        acceptTaskBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tasksProgressTables = new javax.swing.JTable();
        completeTaskBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 102, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Janitor Schedule");

        pendingTasksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Schedule ID", "Room Number", "Cleaning Date", "Cleaning Time", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(pendingTasksTable);

        acceptTaskBtn.setText("Accept Task");
        acceptTaskBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptTaskBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel2.setText("Pending Tasks");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Tasks In Progress");

        tasksProgressTables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Schedule ID", "Room Number", "Cleaning Date", "Cleaning Time", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tasksProgressTables);

        completeTaskBtn.setText("Complete Task");
        completeTaskBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeTaskBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(acceptTaskBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(completeTaskBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(660, 660, 660)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 615, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(604, 604, 604))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(648, 648, 648))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(54, 54, 54)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(acceptTaskBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(completeTaskBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(159, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void acceptTaskBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptTaskBtnActionPerformed
        // TODO add your handling code here:

        try {
            int index = pendingTasksTable.getSelectedRow();

            if (index < 0) {
                JOptionPane.showMessageDialog(this, "Please select a Task to be assigned to you");
                return;
            }

            DefaultTableModel model = (DefaultTableModel) pendingTasksTable.getModel();
            String scheduleId = String.valueOf(model.getValueAt(index, 0));
            Schedule selectedSchedule = system.getJanitorScheduleDirectory().getScheduleById(scheduleId);

            selectedSchedule.setUser(user);
            selectedSchedule.setStatus("In Progress");

            system.getJanitorScheduleDirectory().updateSchedule(selectedSchedule);

            JOptionPane.showMessageDialog(this, "Task assigned to you successfully");
            populateTables();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a Task to be assigned to you");
        }
    }//GEN-LAST:event_acceptTaskBtnActionPerformed

    private void completeTaskBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeTaskBtnActionPerformed
        // TODO add your handling code here:
        
        try {
            int index = tasksProgressTables.getSelectedRow();

            if (index < 0) {
                JOptionPane.showMessageDialog(this, "Please select a Task to be completed");
                return;
            }
            
            DefaultTableModel model = (DefaultTableModel) tasksProgressTables.getModel();
            String scheduleId = String.valueOf(model.getValueAt(index, 0));
            Schedule selectedSchedule = system.getJanitorScheduleDirectory().getScheduleById(scheduleId);
            
            selectedSchedule.setStatus("Completed");

            system.getJanitorScheduleDirectory().updateSchedule(selectedSchedule);

            JOptionPane.showMessageDialog(this, "Task completed successfully");
            populateTables();
            
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a Task to be completed");
        }
    }//GEN-LAST:event_completeTaskBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptTaskBtn;
    private javax.swing.JButton completeTaskBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable pendingTasksTable;
    private javax.swing.JTable tasksProgressTables;
    // End of variables declaration//GEN-END:variables

    private void populateTables() {

        try {

            DefaultTableModel pendingModel = (DefaultTableModel) pendingTasksTable.getModel();
            DefaultTableModel progressModel = (DefaultTableModel) tasksProgressTables.getModel();
            pendingModel.setRowCount(0);
            progressModel.setRowCount(0);

            for (Schedule schedule : system.getJanitorScheduleDirectory().getScheduleDirectory()) {

                if (schedule.getStatus().equals("Pending")) {

                    Object[] pendingRow = new Object[5];
                    pendingRow[0] = schedule.getScheduleId();
                    pendingRow[1] = schedule.getRoomNumber();
                    pendingRow[2] = schedule.getDate();
                    pendingRow[3] = schedule.getTime();
                    pendingRow[4] = schedule.getStatus();

                    pendingModel.addRow(pendingRow);

                } else {

                    if (schedule.getUser().getUserId().equals(user.getUserId())) {

                        Object[] progressRow = new Object[5];
                        progressRow[0] = schedule.getScheduleId();
                        progressRow[1] = schedule.getRoomNumber();
                        progressRow[2] = schedule.getDate();
                        progressRow[3] = schedule.getTime();
                        progressRow[4] = schedule.getStatus();

                        progressModel.addRow(progressRow);
                    }
                }
            }

        } catch (Exception e) {

        }
    }
}
