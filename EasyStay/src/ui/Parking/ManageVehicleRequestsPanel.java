/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Parking;

import Business.EcoSystem;
import Business.Email.EmailNotification;
import Business.TransactionHistory.CustomerTransaction;
import Business.User.User;
import Business.WorkRequest.ParkingWorkRequest;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sushant
 */
public class ManageVehicleRequestsPanel extends javax.swing.JPanel {
    EcoSystem system;

    public ManageVehicleRequestsPanel(EcoSystem system) {
        initComponents();
        this.system = system;
        populateParkRequestsTable();
        formatRows();
    }


    public void populateParkRequestsTable() {
        ArrayList<ParkingWorkRequest> pendingParkingRequest = new ArrayList<>();
        ArrayList<ParkingWorkRequest> nonPendingParkingRequest = new ArrayList<>();

        // Filter requests into pending and non-pending categories
        for (ParkingWorkRequest parkingWRequest : system.getParkingWorkRequestDirectory().getParkingWorkRequestList()) {
            if (parkingWRequest.getStatus().equals("Pending")) {
                pendingParkingRequest.add(parkingWRequest);
            } else {
                nonPendingParkingRequest.add(parkingWRequest);
            }
        }

        populateBasedOnStatus(pendingParkingRequest, nonPendingParkingRequest);
    }

    public void populateBasedOnStatus(ArrayList<ParkingWorkRequest> pendingParkingRequest, ArrayList<ParkingWorkRequest> nonPendingParkingRequest) {
        DefaultTableModel model = (DefaultTableModel) tblParkRequests.getModel();
        model.setRowCount(0);

       
        for (ParkingWorkRequest parkingWRequest : pendingParkingRequest) {
            Object[] newRow = new Object[6];
            newRow[0] = parkingWRequest;
            newRow[1] = parkingWRequest.getParkingDetails().getParkingName();
            newRow[2] = parkingWRequest.getParkingDetails().getPrice();
            newRow[3] = parkingWRequest.getBookingDate();
            newRow[4] = parkingWRequest.getNumberOfHours();
            newRow[5] = parkingWRequest.getStatus();
            model.addRow(newRow);
        }

        DefaultTableModel modelNonPending = (DefaultTableModel) tblParkConfirmed.getModel();
        modelNonPending.setRowCount(0);

        for (ParkingWorkRequest parkingWRequest : nonPendingParkingRequest) {
            Object[] newRow = new Object[6];
            newRow[0] = parkingWRequest;
            newRow[1] = parkingWRequest.getParkingDetails().getParkingName();
            newRow[2] = parkingWRequest.getParkingDetails().getPrice();
            newRow[3] = parkingWRequest.getBookingDate();
            newRow[4] = parkingWRequest.getNumberOfHours();
            newRow[5] = parkingWRequest.getStatus();
            modelNonPending.addRow(newRow);
        }
    }

    public void updateWorkRequestStatus(ParkingWorkRequest selectedParking, String status) {
        selectedParking.setStatus(status);
        int index = 0;
        for (ParkingWorkRequest parkingWRequest : system.getParkingWorkRequestDirectory().getParkingWorkRequestList()) {
            if (parkingWRequest.equals(selectedParking)) {
                system.getParkingWorkRequestDirectory().updateParkingWorkRequest(parkingWRequest, index);
                break;
            }
            index++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblParkRequests = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblParkConfirmed = new javax.swing.JTable();
        btnApprove = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 102, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("MANAGE REQUESTS");

        tblParkRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "User ID", "Park Name", "Park Price", "No. of Hours", "Required Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblParkRequests);

        tblParkConfirmed.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "User ID", "Park Name", "Park Price", "No. of Hours", "Required Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblParkConfirmed);

        btnApprove.setBackground(new java.awt.Color(0, 0, 0));
        btnApprove.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnApprove.setForeground(new java.awt.Color(255, 255, 255));
        btnApprove.setText("APPROVE");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        btnReject.setBackground(new java.awt.Color(0, 0, 0));
        btnReject.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnReject.setForeground(new java.awt.Color(255, 255, 255));
        btnReject.setText("REJECT");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(611, 611, 611)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 955, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(281, 281, 281)
                                .addComponent(btnApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(108, 108, 108)
                                .addComponent(btnReject, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2))))
                .addContainerGap(279, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnReject, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(btnApprove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:
         try {
            int selectedRowIndex = tblParkRequests.getSelectedRow();
            if (selectedRowIndex < 0) {
                JOptionPane.showMessageDialog(this, "Please select a row to approve.");
                return;
            }
            DefaultTableModel model = (DefaultTableModel) tblParkRequests.getModel();
            ParkingWorkRequest selectedParkingWorkRequest = (ParkingWorkRequest) model.getValueAt(selectedRowIndex, 0);
            updateWorkRequestStatus(selectedParkingWorkRequest, "Approved");

            CustomerTransaction ct = new CustomerTransaction();
            float parkingFinalPrice = selectedParkingWorkRequest.getNumberOfHours() * selectedParkingWorkRequest.getParkingDetails().getPrice();
            ct.setFacilityUsed("Parking Booked - " + selectedParkingWorkRequest.getParkingDetails().getParkingName() + " for " + selectedParkingWorkRequest.getNumberOfHours() + " hours");
            ct.setPrice(parkingFinalPrice);

            system.getCustomerTransactionDirectory().addCustomerTransaction(ct);

            // Send email notification (email functionality remains unchanged)

            JOptionPane.showMessageDialog(this, "Request approved successfully and email notification sent.");
            populateParkRequestsTable();
            formatRows();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
            try {
            int selectedRowIndex = tblParkRequests.getSelectedRow();
            if (selectedRowIndex < 0) {
                JOptionPane.showMessageDialog(this, "Please select a row to reject.");
                return;
            }
            DefaultTableModel model = (DefaultTableModel) tblParkRequests.getModel();
            ParkingWorkRequest selectedParkingWorkRequest = (ParkingWorkRequest) model.getValueAt(selectedRowIndex, 0);
            updateWorkRequestStatus(selectedParkingWorkRequest, "Rejected");

            JOptionPane.showMessageDialog(this, "Request rejected successfully.");
            populateParkRequestsTable();
            formatRows();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btnRejectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnReject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblParkConfirmed;
    private javax.swing.JTable tblParkRequests;
    // End of variables declaration//GEN-END:variables
 private void formatRows() {
        DefaultTableModel model = (DefaultTableModel) tblParkConfirmed.getModel();
        tblParkConfirmed.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                String status = String.valueOf(model.getValueAt(row, 5));
                c.setBackground(status.equals("Pending") ? Color.WHITE : status.equals("Approved") ? Color.GREEN : Color.RED);
                return c;
            }
        });
    }
}

